// Generated by CoffeeScript 1.8.0
var ARROW_DOWN_TEMPLATE, ARROW_NEXT_TEMPLATE, Algorithm, BLOCK_WIDTH, CONDITION_TEMPLATE, CONNECTOR_TEMPLATE, CONNECTOR_TEXTS, OPERATION_TEMPLATE, PLACEHOLDER_TEMPLATE, i;

PLACEHOLDER_TEMPLATE = "<div class=\"block\">\n  <div class=\"text\">\n    <ul class=\"nav nav-pills nav-stacked\">\n      <li><a class=\"add-operation\" href=\"#\">Add Operation</a></li>\n      <li><a class=\"add-condition\" href=\"#\">Add Condition</a></li>\n      <li><a class=\"add-end\" href=\"#\">End</a></li>\n    </ul>\n  </div>\n</div>";

OPERATION_TEMPLATE = "<div class=\"block well\"><div class=\"text\"></div></div>";

CONDITION_TEMPLATE = "<div class=\"block condition well\"><div class=\"text\"></div></div>";

CONNECTOR_TEMPLATE = "<div class=\"block connector well\"><div class=\"text\">End</div></div>";

ARROW_NEXT_TEMPLATE = "<div class=\"arrow-next\"><span class=\"glyphicon glyphicon-arrow-right\"></span></div>";

ARROW_DOWN_TEMPLATE = "<div class=\"arrow-down\"><span class=\"glyphicon glyphicon-arrow-down\"></span></div>";

BLOCK_WIDTH = 281;

CONNECTOR_TEXTS = (function() {
  var _i, _results;
  _results = [];
  for (i = _i = 65; _i <= 90; i = ++_i) {
    _results.push(String.fromCharCode(i));
  }
  return _results;
})();

console.log(CONNECTOR_TEXTS);

Algorithm = (function() {
  function Algorithm(el, items) {
    this.el = el;
    this.items = items != null ? items : [];
    this.el.css('overflow-x', 'scroll');
    this.connTxtIdx = 0;
    if (!(this.items.lenght > 0)) {
      this.items.push({
        type: 'placeholder'
      });
    }
    this.clearCanvas();
    this.draw();
  }

  Algorithm.prototype.clearCanvas = function() {
    return this.el.empty();
  };

  Algorithm.prototype.draw = function(itemIdx, line, hpos, secondLine) {
    var item, newLine, _ref;
    if (itemIdx == null) {
      itemIdx = 0;
    }
    if (hpos == null) {
      hpos = 0;
    }
    console.log(this.items, itemIdx, this.items[itemIdx]);
    item = this.items[itemIdx];
    if (line == null) {
      line = this.addLine();
    }
    if (item == null) {
      return;
    }
    if (item.type === 'placeholder') {
      this.addPlaceholder(line, itemIdx, hpos, secondLine);
    }
    if (item.type === 'operation') {
      this.addOperation(line, item);
    }
    if (item.type === 'condition') {
      this.addCondition(line, item);
    }
    if (item.type === 'end') {
      this.addEnd(line);
    }
    hpos++;
    line.css('min-width', hpos * 281);
    if (item.type === 'condition') {
      if (secondLine == null) {
        secondLine = this.addLine();
      }
      this.addDownArrow(line, hpos);
      newLine = this.addLine();
      this.addConnector(secondLine, hpos, newLine);
      this.draw(item.alt, newLine, 1);
    }
    if ((_ref = item.type) === 'operation' || _ref === 'condition') {
      return this.draw(item.next, line, hpos, secondLine);
    }
  };

  Algorithm.prototype.addLine = function() {
    var line;
    line = $("<div class='line'>");
    this.el.append(line);
    return line;
  };

  Algorithm.prototype.addPlaceholder = function(line, idx, hpos, secondLine) {
    var placeHolderEl;
    placeHolderEl = $(PLACEHOLDER_TEMPLATE);
    line.append(placeHolderEl);
    placeHolderEl.find('.add-operation').click((function(_this) {
      return function(e) {
        e.preventDefault();
        placeHolderEl.remove();
        _this.items[idx] = {
          type: 'operation',
          text: 'Operation',
          next: _this.items.length
        };
        _this.items.push({
          type: 'placeholder'
        });
        return _this.draw(idx, line, hpos, secondLine);
      };
    })(this));
    placeHolderEl.find('.add-condition').click((function(_this) {
      return function(e) {
        var condition;
        e.preventDefault();
        placeHolderEl.remove();
        condition = {
          type: 'condition',
          text: 'Condition',
          next: _this.items.length
        };
        _this.items.push({
          type: 'placeholder'
        });
        condition.alt = _this.items.length;
        _this.items.push({
          type: 'placeholder'
        });
        _this.items[idx] = condition;
        return _this.draw(idx, line, hpos, secondLine);
      };
    })(this));
    return placeHolderEl.find('.add-end').click((function(_this) {
      return function(e) {
        e.preventDefault();
        placeHolderEl.remove();
        _this.items[idx] = {
          type: 'end'
        };
        return _this.draw(idx, line, hpos, secondLine);
      };
    })(this));
  };

  Algorithm.prototype.addOperation = function(line, item) {
    var nextArrowEl, operationEl;
    operationEl = $(OPERATION_TEMPLATE);
    operationEl.find('.text').text(item.text);
    line.append(operationEl);
    nextArrowEl = $(ARROW_NEXT_TEMPLATE);
    return line.append(nextArrowEl);
  };

  Algorithm.prototype.addCondition = function(line, item) {
    var conditionEl;
    conditionEl = $(CONDITION_TEMPLATE);
    conditionEl.find('.text').text(item.text);
    line.append(conditionEl);
    return line.append(ARROW_NEXT_TEMPLATE);
  };

  Algorithm.prototype.addEnd = function(line) {
    var endEl;
    endEl = $(CONNECTOR_TEMPLATE);
    endEl.addClass('end');
    return line.append(endEl);
  };

  Algorithm.prototype.addConnector = function(line, hpos, secondLine) {
    var connEl, first;
    console.log("Adding connector " + CONNECTOR_TEXTS[this.connTxtIdx]);
    connEl = $(CONNECTOR_TEMPLATE);
    connEl.find('.text').text(CONNECTOR_TEXTS[this.connTxtIdx++]);
    first = connEl.clone().css({
      position: 'absolute',
      left: ((hpos - 1) * BLOCK_WIDTH) + 60,
      'margin-top': 30
    });
    line.append(first);
    secondLine.append(connEl.css('margin-left', 148));
    return secondLine.append(ARROW_NEXT_TEMPLATE);
  };

  Algorithm.prototype.addDownArrow = function(line, hpos) {
    var arrow, arrowsEl;
    arrowsEl = line.next();
    if (arrowsEl.lenght < 1 || !arrowsEl.hasClass('arrows')) {
      arrowsEl = $('<div class="arrows">');
      line.after(arrowsEl);
    }
    arrow = $(ARROW_DOWN_TEMPLATE);
    arrow.css('left', (hpos - 1) * BLOCK_WIDTH);
    return arrowsEl.append(arrow);
  };

  return Algorithm;

})();

new Algorithm($("#algorithm"), window.algorithm);
